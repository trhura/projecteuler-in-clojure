;; Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The
;; first ten pentagonal numbers are:

;; 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

;; It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their
;; difference, 70 − 22 = 48, is not pentagonal.

;; Find the pair of pentagonal numbers, Pj and Pk, for which their sum
;; and difference are pentagonal and D = |Pk − Pj| is minimised; what is
;; the value of D?

(require '[clojure.string :as string])

(defn is-pentagonal? [x]
  ;; wiki/Pentagonal_number#Tests_for_pentagonal_numbers
  (let [n (/ (+ (Math/sqrt (+ (* 24 x) 1)) 1) 6)]
    (== (bigint n) n)))

(defn pentagonals []
  ;; lazy sequence of infinite pentagonals
  (let [pentagonal-seq (fn lazy-pentagonals [i]
                         (cons (* 1/2 i (- (* 3 i) 1))
                               (lazy-seq (lazy-pentagonals (inc i)))))]
    (pentagonal-seq 1)))

(defn pentagonal-sum-diff []
  ;; lazy vector of sums and differnces of each pentagonal number
  ;; with its previous numbers
  (let [ptg-seq (fn lazy-ptg [i]
                   (let [seq (take i (pentagonals))
                         k   (last seq)
                         j   (reverse (butlast seq))]
                     (concat (map #(vector (+ k %) (- k %)) j)
                             (lazy-seq (lazy-ptg (inc i))))))]
    (ptg-seq 2)))

(defn prob44 []
  (loop [psd (pentagonal-sum-diff)]
    (let [[psum pdif] (first psd)]
      (if (and (is-pentagonal? psum)
               (is-pentagonal? pdif))
        [psum pdif]
        (recur (next psd))))))

;;(println (time (prob45)))
